"""
Django settings for inspireai project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
# import dotenv # python-dotenv is loaded differently
import dj_database_url
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file from the project's base directory
load_dotenv(os.path.join(BASE_DIR, '.env'))

# The .envrc loading logic is replaced by python-dotenv
# if os.path.exists(os.path.join(BASE_DIR, '.envrc')):
#     with open(os.path.join(BASE_DIR, '.envrc'), 'r') as f:
#         for line in f:
#             if line.startswith('export '):
#                 key, value = line.replace('export ', '', 1).strip().split('=', 1)
#                 os.environ[key] = value.strip('"').strip("'")

# These print statements can be removed or kept for debugging,
# but ensure API keys are not exposed in production logs if sensitive.
# print(f"OpenAI API key set: {os.environ.get('OPENAI_API_KEY') is not None}")
# print(f"Hugging Face API key set: {os.environ.get('HUGGINGFACE_API_KEY') is not None}")
# print(f"Gemini API key set: {os.environ.get('GEMINI_API_KEY') is not None}")



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t*-w!33i7f(e_5lnj)lm&(rrr*zad0&658(77r8=4%2mblo*3l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = ['https://inspire-ai-5astm.ondigitalocean.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'django_bootstrap5',
    'catalog.apps.CatalogConfig',
    'users.apps.UsersConfig',
    'interaction.apps.InteractionConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'inspireai.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'inspireai.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

default_db_url = f"sqlite:///{BASE_DIR / 'db.sqlite3'}"

DATABASES = {
    'default': dj_database_url.config(
        default=default_db_url,
        conn_max_age=600,
        conn_health_checks=True,
        # ssl_require is typically handled by the DATABASE_URL query parameter e.g. ?sslmode=require
        # If explicit control is needed:
        # ssl_require=os.getenv('DB_SSLMODE', 'allow') == 'require'
    )
}

# Ensure SSL is used for DigitalOcean managed databases if specified in DATABASE_URL
# dj_database_url should handle the ?sslmode=require in the DATABASE_URL.
# If not, or for more explicit control:
# if DATABASES['default']['HOST'] and 'ondigitalocean.com' in DATABASES['default']['HOST']:
#     if os.getenv('DATABASE_SSLMODE') == 'require' or '?sslmode=require' in os.getenv('DATABASE_URL', ''):
#          DATABASES['default'].setdefault('OPTIONS', {}).update({'sslmode': 'require'})


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = f'{os.environ.get("DO_SPACES_ENDPOINT_URL")}/{os.environ.get("DO_SPACES_BUCKET_NAME")}/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'users.CustomUser'

# Login and logout redirect URLs
LOGIN_REDIRECT_URL = 'catalog:home'
LOGOUT_REDIRECT_URL = 'catalog:home'
LOGIN_URL = 'users:login'

ASGI_APPLICATION = 'inspireai.asgi.application'
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# PostHog Configuration
# Ensure you set these environment variables in your .envrc or deployment environment
POSTHOG_API_KEY = os.environ.get('POSTHOG_API_KEY')
POSTHOG_HOST = os.environ.get('POSTHOG_HOST')
# Optional: Link PostHog's debug mode to Django's DEBUG setting
POSTHOG_DEBUG = DEBUG

# DigitalOcean Spaces settings
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_ACCESS_KEY_ID = os.environ.get('DO_SPACES_ACCESS_KEY') # Make sure to set this in .env or environment
AWS_SECRET_ACCESS_KEY = os.environ.get('DO_SPACES_SECRET_KEY') # Make sure to set this in .env or environment
AWS_STORAGE_BUCKET_NAME = 'blobinsai' # Your Space name
AWS_S3_REGION_NAME = 'nyc3' # Your Space region
AWS_S3_ENDPOINT_URL = f'https://{AWS_S3_REGION_NAME}.digitaloceanspaces.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400', # Cache static files for 1 day
}
AWS_LOCATION = '' # Set to empty string, so upload_to in models is the direct path in the bucket
AWS_DEFAULT_ACL = 'public-read' # Make files public by default
AWS_S3_SIGNATURE_VERSION = 's3v4' # Required for some regions, good practice
AWS_S3_FILE_OVERWRITE = True # If a file with the same name is uploaded, overwrite it. Set to False if you need versioning.

# Construct MEDIA_URL to point to Spaces
# Ensure AWS_LOCATION is an empty string if you want upload_to to be the full path in the bucket.
# If AWS_LOCATION was 'media', then MEDIA_URL would include '/media/' and upload_to paths would be relative to that.
MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/'
# MEDIA_ROOT will not be used by django-storages for S3, but Django might still expect it.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Local path, primarily for manage.py collectstatic if it handles media (rarely)
